[
    {
        "id": "1d20ac9a4a7e3796",
        "type": "function",
        "z": "0b3f1702fe1b5fd1",
        "name": "load file to obj array",
        "func": "fs = global.get(\"fs\"); // equals fs = require('fs')\nconst path = msg.filepath;\nfile = fs.readFileSync(path,'utf-8').split(\"\\n\");\nfile.splice(file.length - 1,1);\nlet data = [];\nfile.forEach(element => data.push(JSON.parse(element)));\nconst keys = Object.keys(data[0]);\n\nfor(var element in data){\n    for(var key of keys){\n        if (data[element][key] == null || data[element][key] == \"inf\"){\n            data.splice(element,1);\n            break;\n        }\n    }\n}\n\nmsg.data = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 920,
        "wires": [
            [
                "e023d10b18a488ed",
                "bd98a9deb4594960"
            ]
        ]
    },
    {
        "id": "3b7e7d70b0d24d94",
        "type": "inject",
        "z": "0b3f1702fe1b5fd1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 920,
        "wires": [
            [
                "c416bb47d58e7e1d"
            ]
        ]
    },
    {
        "id": "c416bb47d58e7e1d",
        "type": "function",
        "z": "0b3f1702fe1b5fd1",
        "name": "define filepath",
        "func": "path = global.get(\"LORIDANE.settings.path.database\");\nnow = Date.now();\ntime = new Date(now);\ndate = time.toISOString().substr(0,7);\nUID = \"NO94B97EC0C46C\";\npath = path+ `${UID}/${UID}_${date}.json`;\n//node.warn(path)\nmsg.params = {\n    starttime: Date.now() - 24*60*60*1000,\n    interval: 24*60*60*1000,\n    costPerKwh: 0.283,\n};\n\n\nmsg.filepath = path;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 920,
        "wires": [
            [
                "1d20ac9a4a7e3796"
            ]
        ]
    },
    {
        "id": "854799d168173f31",
        "type": "debug",
        "z": "0b3f1702fe1b5fd1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 920,
        "wires": []
    },
    {
        "id": "e023d10b18a488ed",
        "type": "function",
        "z": "0b3f1702fe1b5fd1",
        "name": "mean power by time",
        "func": "const interval = msg.params.interval;\nconst starttime = msg.params.starttime;\nconst endtime = starttime + interval;\nconst costPerKwh = msg.params.costPerKwh;\nlet data = msg.data;\nconst IRO = global.get(\"LORIDANE.funcs.inRangeOf\");\nlet powers = [];\nlet timespan = [];\nmsg.out = {};\n\n//set property Key here\nconst powerKey = 'measure1';\n\nfor (i = 0; i<data.length;i++){\n    if(IRO(data[i].timestamp,starttime,endtime)){\n        if (!isNaN(data[i][powerKey])){\n            timespan.push(data[i].timestamp);\n            powers.push(parseFloat(data[i][powerKey]));\n        }\n    }\n}\n\nspan = timespan[timespan.length-1] - timespan[0];\n\nfor (i = 1; i < powers.length; i++){\n    powers[i] *= (timespan[i] - timespan[i-1]);\n}\n\n//node.warn(powers)\npower = powers.reduce((left,right) => left + right);\npower /=  span;\n\n\nmsg.out.powers = powers;\nmsg.out.meanPower  = power;\ncost = power/1000 * costPerKwh * span/36e5;\nmsg.out.costPerInterval = cost;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 920,
        "wires": [
            [
                "854799d168173f31"
            ]
        ]
    },
    {
        "id": "bd98a9deb4594960",
        "type": "debug",
        "z": "0b3f1702fe1b5fd1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 860,
        "wires": []
    },
    {
        "id": "0c57848173652fb4",
        "type": "comment",
        "z": "0b3f1702fe1b5fd1",
        "name": "Example Read DB and calc cost for a given time interval",
        "info": "",
        "x": 350,
        "y": 860,
        "wires": []
    }
]